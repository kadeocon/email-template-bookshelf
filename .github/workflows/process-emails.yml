name: Process Email Templates

on:
  push:
    branches:
      - main
    paths:
      - 'templates/**/*.html'
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      process_all:
        description: 'Process all templates (not just changed ones)'
        required: false
        default: 'true'
        type: boolean

jobs:
  process-templates:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed to see the previous commit for diff
      
      # Install system dependencies for Puppeteer and Canvas
      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install dependencies for Puppeteer (Chrome)
          sudo apt-get install -y --no-install-recommends \
            libgbm1 \
            libxkbcommon0 \
            libpangocairo-1.0-0 \
            libx11-xcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxdamage1 \
            libxi6 \
            libxtst6 \
            libnss3 \
            libcups2 \
            libxss1 \
            libxrandr2 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libpango-1.0-0 \
            libcairo2 \
            libatspi2.0-0 \
            libgtk-3-0 \
            libgdk-pixbuf2.0-0
          
          echo "Installed system dependencies for Puppeteer"
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          # Use npm ci for more reliable dependency installation
          npm ci
          
          # Check if installation was successful
          echo "Checking if puppeteer is installed correctly:"
          node -e "try { require('puppeteer'); console.log('Puppeteer is installed correctly'); } catch(e) { console.error('Puppeteer is NOT installed correctly:', e.message); process.exit(1); }"
          
          echo "Checking if canvas is installed correctly:"
          node -e "try { require('canvas'); console.log('Canvas is installed correctly'); } catch(e) { console.error('Canvas is NOT installed correctly:', e.message); process.exit(1); }"
      
      # Make scripts executable
      - name: Make scripts executable
        run: |
          chmod +x scripts/*.js
          echo "Made scripts executable"
      
      # Create required directories if they don't exist
      - name: Ensure directories exist
        run: |
          mkdir -p docs/previews/static
          mkdir -p docs/previews/animated
          mkdir -p docs/data
          mkdir -p docs/templates
          mkdir -p docs/images
          mkdir -p temp-frames
          
          echo "Directory structure created:"
          ls -la docs/
          ls -la docs/previews/
      
      # Create a placeholder image using a simpler approach
      - name: Create placeholder image
        run: |
          # Create the SVG as a single line to avoid YAML parsing issues
          echo '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 600"><rect width="400" height="600" fill="#f0f0f0"/><rect x="50" y="50" width="300" height="500" rx="8" fill="#ffffff" stroke="#dddddd" stroke-width="2"/><text x="200" y="300" font-family="Arial" font-size="24" fill="#999999" text-anchor="middle">Email Preview</text></svg>' > docs/images/placeholder-email.svg
          
          # Verify file was created
          if [ ! -f "docs/images/placeholder-email.svg" ]; then
            echo "ERROR: Failed to create placeholder image"
            exit 1
          fi
          
          echo "Created placeholder image at docs/images/placeholder-email.svg"
          ls -la docs/images/
      
      # Run Puppeteer diagnostics with a simple script
      - name: Run Puppeteer diagnostics
        run: |
          # Create a simple test script
          cat > scripts/simple-puppeteer-test.js << 'ENDOFFILE'
          const puppeteer = require('puppeteer');
          const fs = require('fs');
          const path = require('path');

          async function test() {
            console.log('Testing Puppeteer in GitHub Actions...');
            
            const browser = await puppeteer.launch({
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            const page = await browser.newPage();
            await page.setContent('<html><body><h1>Test</h1></body></html>');
            
            const testFile = path.join(__dirname, 'test-screenshot.png');
            await page.screenshot({ path: testFile });
            
            const exists = fs.existsSync(testFile);
            console.log(`Screenshot created: ${exists}`);
            
            if (exists) {
              const stats = fs.statSync(testFile);
              console.log(`Screenshot size: ${stats.size} bytes`);
            }
            
            await browser.close();
            console.log('Puppeteer test complete');
          }

          test().catch(err => {
            console.error('Puppeteer test failed:', err);
            process.exit(1);
          });
          ENDOFFILE
          
          # Run the test
          node scripts/simple-puppeteer-test.js
      
      # Step 1: Generate template metadata with timeout
      - name: Generate template metadata
        run: npm run generate-metadata
      
      # Step 2: Validate and fix paths with timeout
      - name: Validate and fix paths
        run: npm run validate-paths
      
      # Step 3: Generate static thumbnails with timeout and memory limit
      - name: Generate static thumbnails
        run: |
          # Set Node.js memory limit
          NODE_OPTIONS="--max-old-space-size=4096" npm run generate-thumbnails
          
          # Check if thumbnails were generated
          THUMBNAIL_COUNT=$(find docs/previews/static -name "*.png" | wc -l)
          echo "Generated $THUMBNAIL_COUNT static thumbnails"
          
          # List thumbnails
          find docs/previews/static -name "*.png" | sort
      
      # Step 4: Generate scrolling GIFs with timeout and memory limit
      - name: Generate scrolling GIFs
        run: |
          # Set Node.js memory limit
          NODE_OPTIONS="--max-old-space-size=4096" npm run generate-gifs
          
          # Check if GIFs were generated
          GIF_COUNT=$(find docs/previews/animated -name "*.gif" | wc -l)
          echo "Generated $GIF_COUNT animated GIFs"
          
          # List GIFs
          find docs/previews/animated -name "*.gif" | sort
      
      # Step 5: Generate detail pages with timeout
      - name: Generate detail pages
        run: npm run generate-pages
      
      # Debugging - List generated assets
      - name: Debug - List generated assets
        run: |
          echo "==== Static thumbnails ===="
          find docs/previews/static -type f | sort
          
          echo -e "\n==== Animated GIFs ===="
          find docs/previews/animated -type f | sort
          
          echo -e "\n==== Generated detail pages ===="
          find docs/templates -name "*.html" | sort
          
          echo -e "\n==== Content of templates.json file ===="
          cat docs/data/templates.json || echo "File not found or empty"
          
          echo -e "\n==== Directory permissions ===="
          ls -la docs/previews/
          ls -la docs/previews/static/
          ls -la docs/previews/animated/
      
      # Step 6: Commit and push all generated assets
      - name: Commit and push generated assets
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git status
          git commit -m "Auto-generate thumbnails, metadata, and detail pages [skip ci]" || echo "No changes to commit"
          git push
