name: Process Email Templates

on:
  push:
    branches:
      - main
    paths:
      - 'templates/**/*.html'
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      process_all:
        description: 'Process all templates (not just changed ones)'
        required: false
        default: 'true'
        type: boolean

jobs:
  process-templates:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed to see the previous commit for diff
      
      # Install system dependencies for Chrome
      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install Chrome and dependencies
          sudo apt-get install -y --no-install-recommends \
            google-chrome-stable \
            libgbm1 \
            libxkbcommon0 \
            libpangocairo-1.0-0 \
            libx11-xcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxi6 \
            libnss3 \
            libcups2 \
            libxss1
          
          echo "Installed system dependencies for Chrome"
          
          # Verify Chrome installation
          google-chrome --version || echo "Chrome not found"
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      
      - name: Install limited dependencies
        run: |
          # Install only the necessary packages with specific versions
          npm install --no-fund --no-audit --loglevel=error \
            puppeteer-core@20.8.0 \
            canvas@2.11.2 \
            gifencoder@2.0.1 \
            png-file-stream@1.2.1 \
            cheerio@1.0.0-rc.12
          
          # Check if installation was successful
          echo "Checking if puppeteer-core is installed correctly:"
          node -e "try { require('puppeteer-core'); console.log('puppeteer-core is installed correctly'); } catch(e) { console.error('puppeteer-core is NOT installed correctly:', e.message); process.exit(1); }"
      
      # Create required directories
      - name: Ensure directories exist
        run: |
          mkdir -p docs/previews/static
          mkdir -p docs/previews/animated
          mkdir -p docs/data
          mkdir -p docs/templates
          mkdir -p docs/images
          mkdir -p temp-frames
      
      # Create a placeholder image
      - name: Create placeholder image
        run: |
          echo '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 600"><rect width="400" height="600" fill="#f0f0f0"/><rect x="50" y="50" width="300" height="500" rx="8" fill="#ffffff" stroke="#dddddd" stroke-width="2"/><text x="200" y="300" font-family="Arial" font-size="24" fill="#999999" text-anchor="middle">Email Preview</text></svg>' > docs/images/placeholder-email.svg

      # Create improved thumbnail generator
      - name: Create improved thumbnail generator
        run: |
          cat > scripts/improved-thumbnail-generator.js << 'ENDOFFILE'
          // improved-thumbnail-generator.js
          // Captures the full height of email templates

          const fs = require('fs');
          const path = require('path');
          const puppeteer = require('puppeteer-core');

          // Configuration
          const config = {
            templatesDir: 'templates',
            outputDir: 'docs/previews/static',
            width: 800,          // Width of the email view
            maxHeight: 15000,    // Maximum height to prevent extreme cases
            defaultHeight: 1200, // Default viewport height to start with
            quality: 80,         // Image quality (0-100)
            chromePath: '/usr/bin/google-chrome-stable',
            debug: true          // Enable logging
          };

          // Get all HTML files in templates directory
          function getAllHtmlFiles(directory) {
            const results = [];
            
            function traverseDirectory(dir) {
              if (!fs.existsSync(dir)) return;
              
              const files = fs.readdirSync(dir);
              
              for (const file of files) {
                const fullPath = path.join(dir, file);
                
                if (fs.statSync(fullPath).isDirectory()) {
                  traverseDirectory(fullPath);
                } else if (file.endsWith('.html') && !file.includes('detail-page-template')) {
                  results.push(fullPath);
                }
              }
            }
            
            traverseDirectory(directory);
            return results;
          }

          async function main() {
            console.log('Starting improved thumbnail generation...');
            
            // Create output directory if it doesn't exist
            if (!fs.existsSync(config.outputDir)) {
              fs.mkdirSync(config.outputDir, { recursive: true });
              console.log(`Created output directory: ${config.outputDir}`);
            }
            
            // Find Chrome executable
            if (!fs.existsSync(config.chromePath)) {
              // Try to find Chrome at common locations
              const possiblePaths = [
                '/usr/bin/google-chrome',
                '/usr/bin/chromium-browser',
                '/usr/bin/chromium'
              ];
              
              for (const possiblePath of possiblePaths) {
                if (fs.existsSync(possiblePath)) {
                  config.chromePath = possiblePath;
                  console.log(`Found Chrome at alternative location: ${config.chromePath}`);
                  break;
                }
              }
              
              if (!fs.existsSync(config.chromePath)) {
                console.error(`Chrome not found. Please install Chrome or update the path.`);
                process.exit(1);
              }
            }
            
            // Get HTML files
            const htmlFiles = getAllHtmlFiles(config.templatesDir);
            console.log(`Found ${htmlFiles.length} HTML files to process`);
            
            // Launch browser
            console.log(`Launching browser using Chrome at: ${config.chromePath}`);
            const browser = await puppeteer.launch({
              executablePath: config.chromePath,
              args: [
                '--no-sandbox', 
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-gpu',
                '--disable-web-security',
                '--disable-features=IsolateOrigins,site-per-process'
              ],
              headless: true,
              defaultViewport: null // We'll set this per page
            });
            
            // Process each file
            let successCount = 0;
            let failCount = 0;
            
            for (const filePath of htmlFiles) {
              try {
                const fileName = path.basename(filePath, '.html');
                const outputPath = path.join(config.outputDir, `${fileName}.png`);
                
                console.log(`\nProcessing: ${filePath}`);
                
                // Create a new page
                const page = await browser.newPage();
                
                // Set initial viewport
                await page.setViewport({
                  width: config.width,
                  height: config.defaultHeight,
                  deviceScaleFactor: 1
                });
                
                // Read HTML content
                console.log(`- Reading HTML content`);
                const htmlContent = fs.readFileSync(filePath, 'utf8');
                
                // Load HTML content
                console.log(`- Loading content into browser`);
                await page.setContent(htmlContent, { 
                  waitUntil: 'networkidle0',
                  timeout: 30000
                });
                
                // Measure the actual height of the email content
                console.log(`- Measuring content height`);
                const contentHeight = await page.evaluate(() => {
                  return Math.min(
                    Math.max(
                      document.body.scrollHeight,
                      document.documentElement.scrollHeight,
                      document.body.offsetHeight,
                      document.documentElement.offsetHeight,
                      document.body.clientHeight,
                      document.documentElement.clientHeight
                    ),
                    15000 // Maximum height limit
                  );
                });
                
                console.log(`- Content height: ${contentHeight}px`);
                
                // Resize viewport to fit content
                await page.setViewport({
                  width: config.width,
                  height: contentHeight,
                  deviceScaleFactor: 1
                });
                
                // Take screenshot of the entire page
                console.log(`- Taking full-height screenshot`);
                await page.screenshot({
                  path: outputPath,
                  fullPage: true,
                  quality: config.quality
                });
                
                console.log(`✓ Created thumbnail: ${outputPath}`);
                
                // Verify the file exists and has content
                if (fs.existsSync(outputPath)) {
                  const stats = fs.statSync(outputPath);
                  console.log(`- File size: ${stats.size} bytes`);
                  
                  if (stats.size < 1000) {
                    console.warn(`⚠️ Warning: Image file is suspiciously small (${stats.size} bytes)`);
                  } else {
                    successCount++;
                  }
                } else {
                  console.error(`✗ Failed to create thumbnail file: ${outputPath}`);
                  failCount++;
                }
                
                // Close page to free memory
                await page.close();
                
              } catch (error) {
                console.error(`✗ Error processing ${filePath}:`, error);
                failCount++;
              }
            }
            
            // Close browser
            await browser.close();
            
            // Print summary
            console.log('\nThumbnail generation summary:');
            console.log(`- Total files processed: ${htmlFiles.length}`);
            console.log(`- Successful: ${successCount}`);
            console.log(`- Failed: ${failCount}`);
            console.log('Thumbnail generation complete!');
          }

          // Run the script
          main().catch(error => {
            console.error('Unhandled error:', error);
            process.exit(1);
          });
          ENDOFFILE

      # Run improved thumbnail generator
      - name: Generate full-height thumbnails
        run: |
          timeout 10m node scripts/improved-thumbnail-generator.js
          
          # Check if thumbnails were generated
          THUMBNAIL_COUNT=$(find docs/previews/static -name "*.png" | wc -l)
          echo "Generated $THUMBNAIL_COUNT static thumbnails"
          
          # List thumbnails
          find docs/previews/static -name "*.png" | sort
      
      # Step 1: Generate template metadata
      - name: Generate template metadata
        run: |
          timeout 5m node scripts/metadata-generator.js
          
          # Verify metadata file was created
          if [ -f "docs/data/templates.json" ]; then
            echo "Template metadata generated successfully."
          else
            echo "Failed to generate metadata."
            exit 1
          fi
      
      # Step 2: Validate and fix paths
      - name: Validate and fix paths
        run: |
          timeout 5m node scripts/path-validator.js
      
      # Step 3: Generate detail pages
      - name: Generate detail pages
        run: |
          timeout 5m node scripts/generate-detail-pages.js
      
      # Debugging - List generated assets
      - name: Debug - List generated assets
        run: |
          echo "==== Static thumbnails ===="
          find docs/previews/static -type f | sort
          
          echo -e "\n==== Content of templates.json file ===="
          cat docs/data/templates.json || echo "File not found or empty"
      
      # Step 4: Commit and push all generated assets
      - name: Commit and push generated assets
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git status
          git commit -m "Auto-generate thumbnails, metadata, and detail pages [skip ci]" || echo "No changes to commit"
          git push
