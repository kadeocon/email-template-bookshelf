name: Process Email Templates

on:
  push:
    branches:
      - main
    paths:
      - 'templates/**/*.html'
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      process_all:
        description: 'Process all templates (not just changed ones)'
        required: false
        default: 'true'
        type: boolean

jobs:
  process-templates:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 2  # Needed to see the previous commit for diff
      
      # Install system dependencies for Chrome
      - name: Install system dependencies
        run: |
          # Update package lists
          sudo apt-get update
          
          # Install Chrome and dependencies
          sudo apt-get install -y --no-install-recommends \
            google-chrome-stable \
            libgbm1 \
            libxkbcommon0 \
            libpangocairo-1.0-0 \
            libx11-xcb1 \
            libxcomposite1 \
            libxcursor1 \
            libxi6 \
            libnss3 \
            libcups2 \
            libxss1
          
          echo "Installed system dependencies for Chrome"
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20
      
      - name: Install limited dependencies
        run: |
          # Install only the necessary packages with specific versions
          npm install --no-fund --no-audit --loglevel=error \
            puppeteer-core@20.8.0 \
            canvas@2.11.2 \
            gifencoder@2.0.1 \
            png-file-stream@1.2.1 \
            cheerio@1.0.0-rc.12
          
          # Check if installation was successful
          echo "Checking if puppeteer-core is installed correctly:"
          node -e "try { require('puppeteer-core'); console.log('puppeteer-core is installed correctly'); } catch(e) { console.error('puppeteer-core is NOT installed correctly:', e.message); process.exit(1); }"
      
      # Create required directories
      - name: Ensure directories exist
        run: |
          mkdir -p docs/previews/static
          mkdir -p docs/previews/animated
          mkdir -p docs/data
          mkdir -p docs/templates
          mkdir -p docs/images
          mkdir -p temp-frames
      
      # Create a placeholder image
      - name: Create placeholder image
        run: |
          echo '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 400 600"><rect width="400" height="600" fill="#f0f0f0"/><rect x="50" y="50" width="300" height="500" rx="8" fill="#ffffff" stroke="#dddddd" stroke-width="2"/><text x="200" y="300" font-family="Arial" font-size="24" fill="#999999" text-anchor="middle">Email Preview</text></svg>' > docs/images/placeholder-email.svg

      # Update thumbnail generator to use puppeteer-core
      - name: Create modified thumbnail generator
        run: |
          cat > scripts/simple-thumbnail-generator.js << 'ENDOFFILE'
          const fs = require('fs');
          const path = require('path');
          const puppeteer = require('puppeteer-core');

          // Get all HTML files in templates directory
          function getAllHtmlFiles(directory) {
            const results = [];
            
            function traverseDirectory(dir) {
              if (!fs.existsSync(dir)) return;
              
              const files = fs.readdirSync(dir);
              
              for (const file of files) {
                const fullPath = path.join(dir, file);
                
                if (fs.statSync(fullPath).isDirectory()) {
                  traverseDirectory(fullPath);
                } else if (file.endsWith('.html') && !file.includes('detail-page-template')) {
                  results.push(fullPath);
                }
              }
            }
            
            traverseDirectory(directory);
            return results;
          }

          async function main() {
            console.log('Starting thumbnail generation...');
            
            // Create output directory if it doesn't exist
            const outputDir = 'docs/previews/static';
            if (!fs.existsSync(outputDir)) {
              fs.mkdirSync(outputDir, { recursive: true });
            }
            
            // Find Chrome executable
            const chromePath = '/usr/bin/google-chrome-stable';
            if (!fs.existsSync(chromePath)) {
              console.error(`Chrome not found at ${chromePath}`);
              process.exit(1);
            }
            
            // Get HTML files
            const htmlFiles = getAllHtmlFiles('templates');
            console.log(`Found ${htmlFiles.length} HTML files`);
            
            // Launch browser
            const browser = await puppeteer.launch({
              executablePath: chromePath,
              args: ['--no-sandbox', '--disable-setuid-sandbox']
            });
            
            // Process each file
            for (const filePath of htmlFiles) {
              try {
                const fileName = path.basename(filePath, '.html');
                const outputPath = path.join(outputDir, `${fileName}.png`);
                
                console.log(`Processing ${filePath}...`);
                
                // Create a new page
                const page = await browser.newPage();
                
                // Set viewport
                await page.setViewport({
                  width: 800,
                  height: 1200,
                  deviceScaleFactor: 1
                });
                
                // Read HTML content
                const htmlContent = fs.readFileSync(filePath, 'utf8');
                
                // Load HTML content
                await page.setContent(htmlContent, { 
                  waitUntil: 'networkidle0',
                  timeout: 30000
                });
                
                // Take screenshot
                await page.screenshot({
                  path: outputPath,
                  fullPage: false,
                  clip: {
                    x: 0,
                    y: 0,
                    width: 800,
                    height: 1200
                  }
                });
                
                console.log(`Created thumbnail: ${outputPath}`);
                
                // Close page
                await page.close();
              } catch (error) {
                console.error(`Error processing ${filePath}:`, error);
              }
            }
            
            // Close browser
            await browser.close();
            console.log('Thumbnail generation complete!');
          }

          main().catch(console.error);
          ENDOFFILE

      # Run thumbnail generator
      - name: Generate static thumbnails
        run: |
          timeout 5m node scripts/simple-thumbnail-generator.js
          
          # Check if thumbnails were generated
          THUMBNAIL_COUNT=$(find docs/previews/static -name "*.png" | wc -l)
          echo "Generated $THUMBNAIL_COUNT static thumbnails"
      
      # Step 1: Generate template metadata
      - name: Generate template metadata
        run: |
          timeout 5m node scripts/metadata-generator.js
          
          # Verify metadata file was created
          if [ -f "docs/data/templates.json" ]; then
            echo "Template metadata generated successfully."
          else
            echo "Failed to generate metadata."
            exit 1
          fi
      
      # Step 2: Validate and fix paths
      - name: Validate and fix paths
        run: |
          timeout 5m node scripts/path-validator.js
      
      # Step 3: Generate detail pages
      - name: Generate detail pages
        run: |
          timeout 5m node scripts/generate-detail-pages.js
      
      # Debugging - List generated assets
      - name: Debug - List generated assets
        run: |
          echo "==== Static thumbnails ===="
          find docs/previews/static -type f | sort
          
          echo -e "\n==== Content of templates.json file ===="
          cat docs/data/templates.json || echo "File not found or empty"
      
      # Step 4: Commit and push all generated assets
      - name: Commit and push generated assets
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add docs/
          git status
          git commit -m "Auto-generate thumbnails, metadata, and detail pages [skip ci]" || echo "No changes to commit"
          git push
